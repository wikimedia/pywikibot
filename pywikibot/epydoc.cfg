[epydoc] # Epydoc section marker (required by ConfigParser)

# modules
#   The list of objects to document.  Objects can be named using
#   dotted names, module filenames, or package directory names.
#   Alases for this option include "objects" and "values".
modules: data.threadedhttp

# output
#   The type of output that should be generated.  Should be one
#   of: html, text, latex, dvi, ps, pdf.
output: html

# target
#   The path to the output directory.  May be relative or absolute.
target: doc/

# css
#   The CSS stylesheet for HTML output.  Can be the name of a builtin
#   stylesheet, or the name of a file.
css: white

# name
#   The documented project's name.
name: Python Mediawiki Framework

# url
#   The documented project's URL.
url: https://www.mediawiki.org/wiki/Manual:Pywikibot

# frames
#   Whether or not to include a frames-based table of contents.
frames: yes

# private
#   Whether or not to include private variables.  (Even if included,
#   private variables will be hidden by default.)
private: yes

# imports
#   Whether or not to list each module's imports.
imports: yes

# verbosity
#   An integer indicating how verbose epydoc should be.  The default
#   value is 0; negative values will suppress warnings and errors;
#   positive values will give more verbose output.
verbosity: 0

# parse
#   Whether or not parsing should be used to examine objects.
parse: yes

# introspect
#   Whether or not introspection should be used to examine objects.
introspect: yes

# graph
#   The list of graph types that should be automatically included
#   in the output.  Graphs are generated using the Graphviz "dot"
#   executable.  Graph types include: "classtree", "callgraph",
#   "umlclass".  Use "all" to include all graph types
graph: all

# dotpath
#   The path to the Graphviz "dot" executable, used to generate
#   graphs.
dotpath: /usr/bin/dot

# sourcecode
#   Whether or not to include syntax highlighted source code in
#   the output (HTML only).
sourcecode: no

# pstat
#   The name of one or more pstat files (generated by the profile
#   or hotshot module).  These are used to generate call graphs.
pstat: profile.out

# separate-classes
#   Whether each class should be listed in its own section when
#   generating LaTeX or PDF output.
separate-classes: no

